import{a,A as s}from"./uf.service-Bn8JpA_W.js";class p{endpoint="/fornecedores";async getAll(){try{const t=await a.get(this.endpoint);return new s(t.data).get()}catch{throw new Error("Erro ao buscar fornecedores")}}async getAllEnriched(){try{const[t,e]=await Promise.all([this.getAll(),w.getAll()]),o=new Map(e.map(r=>[r.id,r]));return t.map(r=>{const n=o.get(r.id_contato);return{...r,contato_nome:n?.nome,contato_valor:n?.valor,contato_tipo:n?.tipo_contato}})}catch{throw new Error("Erro ao buscar fornecedores enriquecidos")}}async getById(t){return(await this.getAll()).find(o=>o.id===t)}async create(t){const e=await this.getAll(),o=e.length>0?Math.max(...e.map(n=>n.id))+1:1,r={...t,id:o};e.push(r);try{return await a.put(this.endpoint,new s(e).toNestedArray()),r}catch{throw new Error("Erro ao criar fornecedor")}}async update(t,e){const o=await this.getAll(),r=o.findIndex(d=>d.id===t);if(r===-1)throw new Error("Fornecedor não encontrado");const n=o[r];if(!n)throw new Error("Fornecedor não encontrado");const c={...n,...e,id:n.id};o[r]=c;try{return await a.put(this.endpoint,new s(o).toNestedArray()),c}catch{throw new Error("Erro ao atualizar fornecedor")}}async delete(t){const o=(await this.getAll()).filter(r=>r.id!==t);try{await a.put(this.endpoint,new s(o).toNestedArray())}catch{throw new Error("Erro ao excluir fornecedor")}}}class l{endpoint="/contatos";async getAll(){try{const t=await a.get(this.endpoint);return new s(t.data).get()}catch{throw new Error("Erro ao buscar contatos")}}async getById(t){return(await this.getAll()).find(o=>o.id===t)}async create(t){const e=await this.getAll(),o=e.length>0?Math.max(...e.map(n=>n.id))+1:1,r={...t,id:o,data_criacao:new Date().toISOString()};e.push(r);try{return await a.put(this.endpoint,new s(e).toNestedArray()),r}catch{throw new Error("Erro ao criar contato")}}}const u=new p,w=new l;export{u as S};
