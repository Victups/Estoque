import{a as i,A as a}from"./uf.service-Bn8JpA_W.js";class l{endpoint="/usuarios";async getAll(){try{const e=await i.get(this.endpoint);return new a(e.data).get()}catch{throw new Error("Erro ao buscar usuários")}}async getById(e){return(await this.getAll()).find(r=>r.id===e)}async create(e){const t=await this.getAll();if(t.some(n=>n.email===e.email))throw new Error("Email já cadastrado");const o={id:t.length>0?Math.max(...t.map(n=>n.id))+1:1,nome:e.nome,email:e.email,senha:e.senha,id_contato:e.id_contato,role:e.role||"estoquista"};t.push(o);try{return await i.put(this.endpoint,new a(t).toNestedArray()),o}catch{throw new Error("Erro ao criar usuário")}}async update(e,t){const r=await this.getAll(),s=r.findIndex(c=>c.id===e);if(s===-1)throw new Error("Usuário não encontrado");const o=r[s];if(!o)throw new Error("Usuário não encontrado");const n={id:o.id,nome:t.nome??o.nome,email:t.email??o.email,senha:t.senha??o.senha,id_contato:t.id_contato??o.id_contato,role:t.role??o.role};r[s]=n;try{return await i.put(this.endpoint,new a(r).toNestedArray()),n}catch{throw new Error("Erro ao atualizar usuário")}}async delete(e){const r=(await this.getAll()).filter(s=>s.id!==e);try{await i.put(this.endpoint,new a(r).toNestedArray())}catch{throw new Error("Erro ao excluir usuário")}}async emailExists(e,t){return(await this.getAll()).some(s=>s.email===e&&s.id!==t)}}const h=new l;export{h as U};
